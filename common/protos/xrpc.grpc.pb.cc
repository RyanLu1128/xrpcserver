// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xrpc.proto

#include "xrpc.pb.h"
#include "xrpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace top {

static const char* xrpc_service_method_names[] = {
  "/top.xrpc_service/call",
};

std::unique_ptr< xrpc_service::Stub> xrpc_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< xrpc_service::Stub> stub(new xrpc_service::Stub(channel));
  return stub;
}

xrpc_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_call_(xrpc_service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status xrpc_service::Stub::call(::grpc::ClientContext* context, const ::top::xrpc_request& request, ::top::xrpc_reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_call_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::top::xrpc_reply>* xrpc_service::Stub::AsynccallRaw(::grpc::ClientContext* context, const ::top::xrpc_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::top::xrpc_reply>::Create(channel_.get(), cq, rpcmethod_call_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::top::xrpc_reply>* xrpc_service::Stub::PrepareAsynccallRaw(::grpc::ClientContext* context, const ::top::xrpc_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::top::xrpc_reply>::Create(channel_.get(), cq, rpcmethod_call_, context, request, false);
}

xrpc_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      xrpc_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< xrpc_service::Service, ::top::xrpc_request, ::top::xrpc_reply>(
          std::mem_fn(&xrpc_service::Service::call), this)));
}

xrpc_service::Service::~Service() {
}

::grpc::Status xrpc_service::Service::call(::grpc::ServerContext* context, const ::top::xrpc_request* request, ::top::xrpc_reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace top

